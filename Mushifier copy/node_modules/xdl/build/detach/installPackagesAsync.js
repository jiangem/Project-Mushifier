'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

let yarnExistsAsync = (() => {
  var _ref2 = _asyncToGenerator(function* () {
    try {
      let version = (yield (0, (_spawnAsync || _load_spawnAsync()).default)('yarnpkg', ['--version'])).stdout.trim();
      return !!(_semver || _load_semver()).default.valid(version);
    } catch (e) {
      return false;
    }
  });

  return function yarnExistsAsync() {
    return _ref2.apply(this, arguments);
  };
})();

var _spawnAsync;

function _load_spawnAsync() {
  return _spawnAsync = _interopRequireDefault(require('@expo/spawn-async'));
}

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _path = _interopRequireDefault(require('path'));

var _semver;

function _load_semver() {
  return _semver = _interopRequireDefault(require('semver'));
}

var _Logger;

function _load_Logger() {
  return _Logger = _interopRequireDefault(require('./Logger'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (() => {
  var _ref = _asyncToGenerator(function* (projectDir, packages, options = {}) {
    let packageManager = 'npm';
    if (options.packageManager) {
      packageManager = options.packageManager;
    } else {
      const packageLockJsonExists = yield (_fsExtra || _load_fsExtra()).default.pathExists(_path.default.join(projectDir, 'package-lock.json'));
      const yarnExists = yield yarnExistsAsync();
      packageManager = yarnExists && !packageLockJsonExists ? 'yarn' : 'npm';
    }

    if (packageManager == 'yarn') {
      (_Logger || _load_Logger()).default.info(`Installing dependencies using Yarn...`);
      yield (0, (_spawnAsync || _load_spawnAsync()).default)('yarnpkg', ['add', '--silent', ...packages], {
        cwd: projectDir,
        stdio: 'inherit'
      });
    } else {
      (_Logger || _load_Logger()).default.info(`Installing dependencies using npm...`);
      if (!(yield (_fsExtra || _load_fsExtra()).default.pathExists(_path.default.join(projectDir, 'node_modules')))) {
        yield (0, (_spawnAsync || _load_spawnAsync()).default)('npm', ['install', '--loglevel', 'error'], {
          cwd: projectDir,
          stdio: 'inherit'
        });
      }
      yield (0, (_spawnAsync || _load_spawnAsync()).default)('npm', ['install', '--save', '--loglevel', 'error', ...packages], {
        cwd: projectDir,
        stdio: 'inherit'
      });
    }
  });

  function installPackagesAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  }

  return installPackagesAsync;
})();
//# sourceMappingURL=../__sourcemaps__/detach/installPackagesAsync.js.map
