'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeCredentialsForPlatform = exports.updateCredentialsForPlatform = exports.getCredentialsForPlatform = exports.getEncryptedCredentialsForPlatformAsync = exports.credentialsExistForPlatformAsync = exports.Ios = exports.Android = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

let credentialsExistForPlatformAsync = exports.credentialsExistForPlatformAsync = (() => {
  var _ref = _asyncToGenerator(function* (metadata) {
    const creds = yield fetchCredentials(metadata, false);
    return !!creds; // !! performed on awaited creds
  });

  return function credentialsExistForPlatformAsync(_x) {
    return _ref.apply(this, arguments);
  };
})();

let getEncryptedCredentialsForPlatformAsync = exports.getEncryptedCredentialsForPlatformAsync = (() => {
  var _ref2 = _asyncToGenerator(function* (metadata) {
    return fetchCredentials(metadata, false);
  });

  return function getEncryptedCredentialsForPlatformAsync(_x2) {
    return _ref2.apply(this, arguments);
  };
})();

let getCredentialsForPlatform = exports.getCredentialsForPlatform = (() => {
  var _ref3 = _asyncToGenerator(function* (metadata) {
    return fetchCredentials(metadata, true);
  });

  return function getCredentialsForPlatform(_x3) {
    return _ref3.apply(this, arguments);
  };
})();

let fetchCredentials = (() => {
  var _ref4 = _asyncToGenerator(function* ({ username, experienceName, bundleIdentifier, platform }, decrypt) {
    // this doesn't hit our mac rpc channel, so it needs significantly less debugging
    const { err, credentials } = yield (_Api || _load_Api()).default.callMethodAsync('getCredentials', [], 'post', {
      username,
      experienceName,
      bundleIdentifier,
      platform,
      decrypt
    });

    if (err) {
      throw new Error('Error fetching credentials.');
    }

    return credentials;
  });

  return function fetchCredentials(_x4, _x5) {
    return _ref4.apply(this, arguments);
  };
})();

let updateCredentialsForPlatform = exports.updateCredentialsForPlatform = (() => {
  var _ref5 = _asyncToGenerator(function* (platform, newCredentials, userCredentialsIds, metadata) {
    const { err, credentials } = yield (_Api || _load_Api()).default.callMethodAsync('updateCredentials', [], 'post', _extends({
      credentials: newCredentials,
      userCredentialsIds,
      platform
    }, metadata));

    if (err || !credentials) {
      throw new Error('Error updating credentials.');
    }
  });

  return function updateCredentialsForPlatform(_x6, _x7, _x8, _x9) {
    return _ref5.apply(this, arguments);
  };
})();

let removeCredentialsForPlatform = exports.removeCredentialsForPlatform = (() => {
  var _ref6 = _asyncToGenerator(function* (platform, metadata) {
    // doesn't go through mac rpc, no request id needed
    const { err } = yield (_Api || _load_Api()).default.callMethodAsync('deleteCredentials', [], 'post', _extends({
      platform
    }, metadata));

    if (err) {
      throw new Error('Error deleting credentials.');
    }
  });

  return function removeCredentialsForPlatform(_x10, _x11) {
    return _ref6.apply(this, arguments);
  };
})();

var _Api;

function _load_Api() {
  return _Api = _interopRequireDefault(require('../Api'));
}

var _AndroidCredentials;

function _load_AndroidCredentials() {
  return _AndroidCredentials = _interopRequireWildcard(require('./AndroidCredentials'));
}

var _IosCredentials;

function _load_IosCredentials() {
  return _IosCredentials = _interopRequireWildcard(require('./IosCredentials'));
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.Android = _AndroidCredentials || _load_AndroidCredentials();
exports.Ios = _IosCredentials || _load_IosCredentials();
//# sourceMappingURL=../__sourcemaps__/credentials/Credentials.js.map
