{"version":3,"sources":["Exp.js"],"names":["async","root","let","exp","pkg","await","ProjectUtils","readConfigJsonAsync","entryPoint","main","determineEntryPointAsync","templateSpec","projectRoot","packageManager","config","Logger","notifications","info","code","NotificationCode","PROGRESS","MessageCode","EXTRACTING","tarStream","pacote","tarball","stream","cache","path","join","UserSettings","dotExpoHomeDirectory","fs","mkdirp","Promise","resolve","reject","extractStream","tar","x","cwd","strip","transform","createFileTransform","onentry","entry","name","replace","toLowerCase","type","basename","on","pipe","CUSTOMIZING","appFile","appJson","merge","readAsync","writeAsync","packageFile","packageJson","private","version","description","tags","repository","_resolved","_integrity","_from","initGitRepoAsync","installDependenciesAsync","extractTemplateApp","process","platform","Binaries","isXcodeInstalled","global","warn","insideGit","spawnAsync","debug","e","stdio","recentExpsJsonFile","recentExps","filter","unshift","slice","saveRecentExpRootAsync","icon","iconUrl","pathOrUrl","resolvedPath","existsSync","readableRoot","makePathReadable","expInfoSafeAsync","publicUrl","user","UserManager","ensureLoggedInAsync","Error","username","ThirdParty","getManifest","slug","sdkVersion","iosBundleIdentifier","ios","bundleIdentifier","androidPackage","android","package","args","remoteUsername","remotePackageName","remoteFullPackageName","getThirdPartyInfoAsync","configName","configFilenameAsync","getPublishInfoAsync","results","all","map","filteredResults","result","recentValidExpsAsync","recipient","url_","allowUnauthed","Api","callMethodAsync","sendAsync","ps","ProjectSettings","randomness","urlRandomness","resetProjectRandomnessAsync","getProjectRandomnessAsync","UrlUtils","someRandomness","setAsync","rimraf","sync","clearXDLCacheAsync","default","ENTRY_POINT_PLATFORM_TEMPLATE_STRING","Transformer","constructor","data","displayName","write","end","replaced","binaryExtensions","transformFile","includes","extname","getHomeDir","env","pth","homedir","substr","length"],"mappings":"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","file":"../Exp.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport merge from 'lodash/merge';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport JsonFile from '@expo/json-file';\nimport Minipass from 'minipass';\nimport rimraf from 'rimraf';\nimport pacote from 'pacote';\nimport tar from 'tar';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport * as Detach from './detach/Detach';\nimport ErrorCode from './ErrorCode';\nimport * as Extract from './Extract';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ThirdParty from './ThirdParty';\nimport UserManager from './User';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\nimport * as ProjectSettings from './ProjectSettings';\nimport MessageCode from './MessageCode';\n\n// FIXME(perry) eliminate usage of this template\nexport const ENTRY_POINT_PLATFORM_TEMPLATE_STRING = 'PLATFORM_GOES_HERE';\n\nexport { default as convertProjectAsync } from './project/Convert';\n\nexport async function determineEntryPointAsync(root: string) {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(root);\n\n  // entryPoint is relative to the packager root and main is relative\n  // to the project root. So if your rn-cli.config.js points to a different\n  // root than the project root, these can be different. Most of the time\n  // you should use main.\n  let entryPoint = pkg.main || 'index.js';\n  if (exp && exp.entryPoint) {\n    entryPoint = exp.entryPoint;\n  }\n\n  return entryPoint;\n}\n\nclass Transformer extends Minipass {\n  constructor(config) {\n    super();\n    this.data = '';\n    this.config = config;\n    this.displayName = config.displayName || config.name;\n  }\n  write(data) {\n    this.data += data;\n    return true;\n  }\n  end() {\n    let replaced = this.data\n      .replace(/Hello App Display Name/g, this.config.displayName || this.config.name)\n      .replace(/HelloWorld/g, this.config.name)\n      .replace(/helloworld/g, this.config.name.toLowerCase());\n    super.write(replaced);\n    return super.end();\n  }\n}\n\n// Binary files, don't process these (avoid decoding as utf8)\nconst binaryExtensions = ['.png', '.jar'];\n\nfunction createFileTransform(config) {\n  return function transformFile(entry) {\n    if (!binaryExtensions.includes(path.extname(entry.path)) && config.name) {\n      return new Transformer(config);\n    }\n  };\n}\n\nexport async function extractTemplateApp(\n  templateSpec: string | object,\n  projectRoot: string,\n  packageManager: 'yarn' | 'npm' = 'npm',\n  config = {}\n) {\n  Logger.notifications.info({ code: NotificationCode.PROGRESS }, MessageCode.EXTRACTING);\n  let tarStream = await pacote.tarball.stream(templateSpec, {\n    cache: path.join(UserSettings.dotExpoHomeDirectory(), 'template-cache'),\n  });\n  await fs.mkdirp(projectRoot);\n  await new Promise((resolve, reject) => {\n    const extractStream = tar.x({\n      cwd: projectRoot,\n      strip: 1,\n      transform: createFileTransform(config),\n      onentry(entry) {\n        if (config.name) {\n          // Rewrite paths for bare workflow\n          entry.path = entry.path\n            .replace(/HelloWorld/g, config.name)\n            .replace(/helloworld/g, config.name.toLowerCase());\n        }\n        if (entry.type.toLowerCase() === 'file' && path.basename(entry.path) === 'gitignore') {\n          // Rename `gitignore` because npm ignores files named `.gitignore` when publishing.\n          // See: https://github.com/npm/npm/issues/1862\n          entry.path = '.gitignore';\n        }\n      },\n    });\n    tarStream.on('error', reject);\n    extractStream.on('error', reject);\n    extractStream.on('close', resolve);\n    tarStream.pipe(extractStream);\n  });\n\n  // Update files\n  Logger.notifications.info({ code: NotificationCode.PROGRESS }, MessageCode.CUSTOMIZING);\n\n  let appFile = new JsonFile(path.join(projectRoot, 'app.json'));\n  let appJson = merge(await appFile.readAsync(), config);\n  await appFile.writeAsync(appJson);\n\n  let packageFile = new JsonFile(path.join(projectRoot, 'package.json'));\n  let packageJson = await packageFile.readAsync();\n  // Adding `private` stops npm from complaining about missing `name` and `version` fields.\n  // We don't add a `name` field because it also exists in `app.json`.\n  packageJson = { ...packageJson, private: true };\n  // These are metadata fields related to the template package, let's remove them from the package.json.\n  delete packageJson.name;\n  delete packageJson.version;\n  delete packageJson.description;\n  delete packageJson.tags;\n  delete packageJson.repository;\n  // pacote adds these, but we don't want them in the package.json of the project.\n  delete packageJson._resolved;\n  delete packageJson._integrity;\n  delete packageJson._from;\n  await packageFile.writeAsync(packageJson);\n\n  await initGitRepoAsync(projectRoot);\n  await installDependenciesAsync(projectRoot, packageManager);\n\n  return projectRoot;\n}\n\nasync function initGitRepoAsync(root: string) {\n  if (process.platform === 'darwin' && !Binaries.isXcodeInstalled()) {\n    Logger.global.warn(`Unable to initialize git repo. \\`git\\` not installed.`);\n    return;\n  }\n\n  // let's see if we're in a git tree\n  let insideGit = true;\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], {\n      cwd: root,\n    });\n    Logger.global.debug('New project is already inside of a git repo, skipping git init.');\n  } catch (e) {\n    insideGit = false;\n  }\n\n  if (!insideGit) {\n    try {\n      await spawnAsync('git', ['init'], { cwd: root });\n      Logger.global.info('Initialized a git repository.');\n    } catch (e) {\n      // no-op -- this is just a convenience and we don't care if it fails\n    }\n  }\n}\n\nasync function installDependenciesAsync(projectRoot, packageManager) {\n  Logger.global.info('Installing dependencies...');\n\n  if (packageManager === 'yarn') {\n    await spawnAsync('yarnpkg', ['install'], {\n      cwd: projectRoot,\n      stdio: 'inherit',\n    });\n  } else {\n    await spawnAsync('npm', ['install'], {\n      cwd: projectRoot,\n      stdio: 'inherit',\n    });\n  }\n}\n\nexport async function saveRecentExpRootAsync(root: string) {\n  root = path.resolve(root);\n\n  // Write the recent Exps JSON file\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n  // Filter out copies of this so we don't get dupes in this list\n  recentExps = recentExps.filter(function(x) {\n    return x !== root;\n  });\n  recentExps.unshift(root);\n  return await recentExpsJsonFile.writeAsync(recentExps.slice(0, 100));\n}\n\nfunction getHomeDir(): string {\n  return process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] || '';\n}\n\nfunction makePathReadable(pth) {\n  let homedir = getHomeDir();\n  if (pth.substr(0, homedir.length) === homedir) {\n    return `~${pth.substr(homedir.length)}`;\n  } else {\n    return pth;\n  }\n}\n\nexport async function expInfoSafeAsync(root: string) {\n  try {\n    let {\n      exp: { name, description, icon, iconUrl },\n    } = await ProjectUtils.readConfigJsonAsync(root);\n    let pathOrUrl =\n      icon || iconUrl || 'https://d3lwq5rlu14cro.cloudfront.net/ExponentEmptyManifest_192.png';\n    let resolvedPath = path.resolve(root, pathOrUrl);\n    if (fs.existsSync(resolvedPath)) {\n      icon = `file://${resolvedPath}`;\n    } else {\n      icon = pathOrUrl; // Assume already a URL\n    }\n\n    return {\n      readableRoot: makePathReadable(root),\n      root,\n      name,\n      description,\n      icon,\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\ntype PublishInfo = {\n  args: {\n    username: string,\n    remoteUsername: string,\n    remotePackageName: string,\n    remoteFullPackageName: string,\n    iosBundleIdentifier: ?string,\n    androidPackage: ?string,\n  },\n};\n\nexport async function getThirdPartyInfoAsync(publicUrl: string): Promise<PublishInfo> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Attempted to login in offline mode. This is a bug.');\n  }\n\n  const { username } = user;\n\n  const exp = await ThirdParty.getManifest(publicUrl);\n  const { slug, sdkVersion, version } = exp;\n  if (!sdkVersion) {\n    throw new Error(`sdkVersion is missing from ${publicUrl}`);\n  }\n\n  if (!slug) {\n    // slug is made programmatically for app.json\n    throw new Error(`slug field is missing from exp.json.`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  const iosBundleIdentifier = exp.ios ? exp.ios.bundleIdentifier : null;\n  const androidPackage = exp.android ? exp.android.package : null;\n  return {\n    args: {\n      username,\n      remoteUsername: username,\n      remotePackageName: slug,\n      remoteFullPackageName: `@${username}/${slug}`,\n      sdkVersion,\n      iosBundleIdentifier,\n      androidPackage,\n    },\n  };\n}\n\n// TODO: remove / change, no longer publishInfo, this is just used for signing\nexport async function getPublishInfoAsync(root: string): Promise<PublishInfo> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Attempted to login in offline mode. This is a bug.');\n  }\n\n  const { username } = user;\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(root);\n\n  const name = exp.slug;\n  const { version, sdkVersion } = exp;\n\n  const configName = await ProjectUtils.configFilenameAsync(root);\n\n  if (!sdkVersion) {\n    throw new Error(`sdkVersion is missing from ${configName}`);\n  }\n\n  if (!name) {\n    // slug is made programmatically for app.json\n    throw new Error(`slug field is missing from exp.json.`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  const remotePackageName = name;\n  const remoteUsername = username;\n  const remoteFullPackageName = `@${remoteUsername}/${remotePackageName}`;\n  const iosBundleIdentifier = exp.ios ? exp.ios.bundleIdentifier : null;\n  const androidPackage = exp.android ? exp.android.package : null;\n\n  return {\n    args: {\n      username,\n      remoteUsername,\n      remotePackageName,\n      remoteFullPackageName,\n      sdkVersion,\n      iosBundleIdentifier,\n      androidPackage,\n    },\n  };\n}\n\nexport async function recentValidExpsAsync() {\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n\n  let results = await Promise.all(recentExps.map(expInfoSafeAsync));\n  let filteredResults = results.filter(result => result);\n  return filteredResults;\n}\n\nexport async function sendAsync(recipient: string, url_: string, allowUnauthed: boolean = true) {\n  let result = await Api.callMethodAsync('send', [recipient, url_, allowUnauthed]);\n  return result;\n}\n\n// TODO: figure out where these functions should live\nexport async function getProjectRandomnessAsync(projectRoot: string) {\n  let ps = await ProjectSettings.readAsync(projectRoot);\n  let randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nexport async function resetProjectRandomnessAsync(projectRoot: string) {\n  let randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, { urlRandomness: randomness });\n  return randomness;\n}\n\nexport async function clearXDLCacheAsync() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'android-apk-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'starter-app-cache'));\n  Logger.notifications.info(`Cleared cache`);\n}\n"],"sourceRoot":"/xdl@53.1.4/src"}