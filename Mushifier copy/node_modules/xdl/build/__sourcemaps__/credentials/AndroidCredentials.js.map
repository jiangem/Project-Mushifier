{"version":3,"sources":["credentials/AndroidCredentials.js"],"names":["async","outputPath","username","experienceName","log","logger","info","bind","logSecrets","credentialMetadata","platform","credentials","await","getCredentialsForPlatform","Error","keystore","keystorePassword","keystoreAlias","keyAlias","keyPassword","storeBuf","Buffer","from","fs","writeFileSync","chalk","yellow","bold","backupExistingCredentials","keystorePath","certFile","spawnAsync","exportCert","encryptionKey","let","nodePty","ptyTmpDir","require","err","mkdirp","cwd","stdio","cyan","ptySpawn","spawn","encryptToolPath","path","join","UserSettings","dotExpoHomeDirectory","existsSync","downloadUrl","file","createWriteStream","response","axios","url","method","responseType","bar","complete","incomplete","width","total","parseInt","headers","data","pipe","on","chunk","tick","length","Promise","resolve","reject","res","rej","child","javaExecutable","name","cols","rows","process","env","exitCode","write","NEWLINE","error","remove","exportPrivateKey","readFileSync","googleHash","crypto","createHash","update","digest","toUpperCase","googleHash256","fbHash","replace","code","warn","stdout","stderr","unlinkSync","logKeystoreHashes","androidPackage","createKeystore","uploadKeystorePath","keystoreData","uuidv4","toString","generateUploadKeystore","logKeystoreCredentials","title"],"mappings":"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","file":"../../credentials/AndroidCredentials.js","sourcesContent":["/* @flow */\n\nimport path from 'path';\n\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport crypto from 'crypto';\nimport uuidv4 from 'uuid/v4';\nimport spawnAsync from '@expo/spawn-async';\nimport axios from 'axios';\nimport ProgressBar from 'progress';\n\nimport { getCredentialsForPlatform } from './Credentials';\nimport logger from '../Logger';\nimport UserSettings from '../UserSettings';\n\nconst NEWLINE = process.platform === 'win32' ? '\\r\\n' : '\\n';\nconst javaExecutable = process.platform === 'win32' ? 'java.exe' : 'java';\n\nexport type Credentials = {\n  keystore: string,\n  keystorePassword: string,\n  keyPassword: string,\n  keystoreAlias: string,\n};\n\nexport async function backupExistingCredentials(\n  { outputPath, username, experienceName }: Object,\n  log: any = logger.info.bind(logger),\n  logSecrets: boolean = true\n) {\n  const credentialMetadata = { username, experienceName, platform: 'android' };\n\n  log(`Retreiving Android keystore for ${experienceName}`);\n\n  const credentials = (await getCredentialsForPlatform(credentialMetadata): any);\n  if (!credentials) {\n    throw new Error('Unable to fetch credentials for this project. Are you sure they exist?');\n  }\n  const { keystore, keystorePassword, keystoreAlias: keyAlias, keyPassword } = credentials;\n\n  const storeBuf = Buffer.from(keystore, 'base64');\n  log(`Writing keystore to ${outputPath}...`);\n  fs.writeFileSync(outputPath, storeBuf);\n  if (logSecrets) {\n    log('Done writing keystore to disk.');\n    log(`${chalk.yellow('Save these important values as well:')}\n\n  Keystore password: ${chalk.bold(keystorePassword)}\n  Key alias:         ${chalk.bold(keyAlias)}\n  Key password:      ${chalk.bold(keyPassword)}\n  `);\n  }\n  return {\n    keystorePassword,\n    keyAlias,\n    keyPassword,\n  };\n}\n\nexport async function exportCert(\n  keystorePath: string,\n  keystorePassword: string,\n  keyAlias: string,\n  certFile: string\n) {\n  return spawnAsync('keytool', [\n    '-exportcert',\n    '-keystore',\n    keystorePath,\n    '-storepass',\n    keystorePassword,\n    '-alias',\n    keyAlias,\n    '-file',\n    certFile,\n    '-noprompt',\n    '-storetype',\n    'JKS',\n  ]);\n}\n\nexport async function exportPrivateKey(\n  { keystorePath, keystorePassword, keyAlias, keyPassword }: Object,\n  encryptionKey: string,\n  outputPath: string,\n  log: any = logger.info.bind(logger)\n) {\n  let nodePty;\n  const ptyTmpDir = '/tmp/pty-tmp-install';\n  try {\n    // it's not very pretty solution, but we decided to use it because it's affecting only people using\n    // this command and if node-pty is supported on that system instalation process will be invisble for user.\n    nodePty = require('node-pty-prebuilt');\n  } catch (err) {\n    try {\n      log('Installing node-pty-prebuilt in temporary directory');\n      await fs.mkdirp(ptyTmpDir);\n      await spawnAsync('npm', ['init', '--yes'], { cwd: ptyTmpDir });\n      await spawnAsync('npm', ['install', 'node-pty-prebuilt'], {\n        cwd: ptyTmpDir,\n        stdio: ['pipe', 1, 2],\n      });\n      nodePty = require(`${ptyTmpDir}/node_modules/node-pty-prebuilt`);\n    } catch (err) {\n      log(`Run ${chalk.cyan('npm -g install node-pty-prebuilt')} to install node pty`);\n      throw new Error('Package node-pty-prebuilt is required to use PEPK tool');\n    }\n  }\n  const ptySpawn = nodePty.spawn;\n  const encryptToolPath = path.join(UserSettings.dotExpoHomeDirectory(), 'android_tools_pepk.jar');\n  if (!fs.existsSync(encryptToolPath)) {\n    log(`Downloading PEPK tool from Google Play to ${encryptToolPath}`);\n    const downloadUrl =\n      'https://www.gstatic.com/play-apps-publisher-rapid/signing-tool/prod/pepk.jar';\n    const file = fs.createWriteStream(encryptToolPath);\n    const response = await axios({ url: downloadUrl, method: 'GET', responseType: 'stream' });\n    const bar = new ProgressBar('  downloading pepk tool [:bar] :rate/bps :percent :etas', {\n      complete: '=',\n      incomplete: ' ',\n      width: 40,\n      total: parseInt(response.headers['content-length'], 10),\n    });\n    response.data.pipe(file);\n    response.data.on('data', chunk => bar.tick(chunk.length));\n    await new Promise((resolve, reject) => {\n      file.on('finish', resolve);\n      file.on('error', reject);\n    });\n  }\n  try {\n    await new Promise((res, rej) => {\n      const child = ptySpawn(\n        javaExecutable,\n        [\n          '-jar',\n          encryptToolPath,\n          '--keystore',\n          keystorePath,\n          '--alias',\n          keyAlias,\n          '--output',\n          outputPath,\n          '--encryptionkey',\n          encryptionKey,\n        ],\n        {\n          name: 'pepk tool',\n          cols: 80,\n          rows: 30,\n          cwd: process.cwd(),\n          env: process.env,\n        }\n      );\n      child.on('error', err => {\n        log('error', err);\n        rej(err);\n      });\n      child.on('exit', exitCode => {\n        if (exitCode != 0) {\n          rej(exitCode);\n        } else {\n          res();\n        }\n      });\n      child.write(keystorePassword + NEWLINE);\n      child.write(keyPassword + NEWLINE);\n    });\n    log(`Exported and encrypted private app signing key to file ${outputPath}`);\n  } catch (error) {\n    throw new Error(`PEPK tool failed with return code ${error}`);\n  } finally {\n    fs.remove(ptyTmpDir);\n  }\n}\n\nexport async function logKeystoreHashes(\n  { keystorePath, keystorePassword, keyAlias }: Object,\n  log: any = logger.info.bind(logger)\n) {\n  const certFile = `${keystorePath}.cer`;\n  try {\n    await exportCert(keystorePath, keystorePassword, keyAlias, certFile);\n    const data = fs.readFileSync(certFile);\n    const googleHash = crypto\n      .createHash('sha1')\n      .update(data)\n      .digest('hex')\n      .toUpperCase();\n    const googleHash256 = crypto\n      .createHash('sha256')\n      .update(data)\n      .digest('hex')\n      .toUpperCase();\n    const fbHash = crypto\n      .createHash('sha1')\n      .update(data)\n      .digest('base64');\n    log(`Google Certificate Fingerprint:     ${googleHash.replace(/(.{2}(?!$))/g, '$1:')}`);\n    log(`Google Certificate Hash (SHA-1):    ${googleHash}`);\n    log(`Google Certificate Hash (SHA-256):  ${googleHash256}`);\n    log(`Facebook Key Hash:                  ${fbHash}`);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log('keytool is part of OpenJDK: https://openjdk.java.net/');\n      log('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  } finally {\n    try {\n      fs.unlinkSync(certFile);\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        log.error(err);\n      }\n    }\n  }\n}\n\nexport function logKeystoreCredentials(\n  { keystorePassword, keyAlias, keyPassword }: Object,\n  title: string = 'Keystore credentials',\n  log: any = logger.info.bind(logger)\n) {\n  log(`${title}\n    Keystore password: ${chalk.bold(keystorePassword)}\n    Key alias:         ${chalk.bold(keyAlias)}\n    Key password:      ${chalk.bold(keyPassword)}\n  `);\n}\n\nexport async function createKeystore(\n  { keystorePath, keystorePassword, keyAlias, keyPassword }: Object,\n  androidPackage: string\n): Promise<> {\n  return spawnAsync('keytool', [\n    '-genkey',\n    '-v',\n    '-storepass',\n    keystorePassword,\n    '-keypass',\n    keyPassword,\n    '-keystore',\n    keystorePath,\n    '-alias',\n    keyAlias,\n    '-keyalg',\n    'RSA',\n    '-keysize',\n    '2048',\n    '-validity',\n    '10000',\n    '-dname',\n    `CN=${androidPackage},OU=,O=,L=,S=,C=US`,\n  ]);\n}\n\nexport async function generateUploadKeystore(\n  uploadKeystorePath: string,\n  androidPackage: string,\n  experienceName: string\n): Promise<Object> {\n  const keystoreData = {\n    keystorePassword: uuidv4().replace(/-/g, ''),\n    keyPassword: uuidv4().replace(/-/g, ''),\n    keyAlias: Buffer.from(experienceName).toString('base64'),\n  };\n  await createKeystore({ keystorePath: uploadKeystorePath, ...keystoreData }, androidPackage);\n  return keystoreData;\n}\n"],"sourceRoot":"/xdl@53.1.4/src"}