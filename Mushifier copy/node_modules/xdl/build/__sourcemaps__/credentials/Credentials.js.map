{"version":3,"sources":["credentials/Credentials.js"],"names":["async","metadata","creds","await","fetchCredentials","credentialsExistForPlatformAsync","getEncryptedCredentialsForPlatformAsync","getCredentialsForPlatform","username","experienceName","bundleIdentifier","platform","decrypt","err","credentials","Api","callMethodAsync","Error","newCredentials","userCredentialsIds","updateCredentialsForPlatform","removeCredentialsForPlatform","Android","Ios"],"mappings":";;;;;;;;;;+BAiBOA,WACLC,QADKD,EAEkB;AACvB,UAAME,QAAQC,MAAMC,iBAAiBH,QAAjBG,EAA2B,KAA3BA,CAApB;AACA,WAAO,CAAC,CAAEF,KAAV,CAFuB,CAEF;AACvB,G;;kBALsBG,gC;;;;;;gCAOfL,WACLC,QADKD,EAEkB;AACvB,WAAOI,iBAAiBH,QAAjBG,EAA2B,KAA3BA,CAAP;AACF,G;;kBAJsBE,uC;;;;;;gCAMfN,WACLC,QADKD,EAEkB;AACvB,WAAOI,iBAAiBH,QAAjBG,EAA2B,IAA3BA,CAAP;AACF,G;;kBAJsBG,yB;;;;;;gCAMtBP,WACE,EAAEQ,QAAF,EAAYC,cAAZ,EAA4BC,gBAA5B,EAA8CC,QAA9C,EADFX,EAEEY,OAFFZ,EAGyB;AACvB;AACA,UAAM,EAAEa,GAAF,EAAOC,WAAP,KAAuBX,MAAMY,8BAAIC,eAAJD,CAAoB,gBAApBA,EAAsC,EAAtCA,EAA0C,MAA1CA,EAAkD;AACnFP,cADmF;AAEnFC,oBAFmF;AAGnFC,sBAHmF;AAInFC,cAJmF;AAKnFC;AALmF,KAAlDG,CAAnC;;AAQA,QAAIF,GAAJ,EAAS;AACP,YAAM,IAAII,KAAJ,CAAU,6BAAV,CAAN;AACF;;AAEA,WAAOH,WAAP;AACF,G;;kBAlBeV,gB;;;;;;gCAoBRJ,WACLW,QADKX,EAELkB,cAFKlB,EAGLmB,kBAHKnB,EAILC,QAJKD,EAKU;AACf,UAAM,EAAEa,GAAF,EAAOC,WAAP,KAAuBX,MAAMY,8BAAIC,eAAJD,CAAoB,mBAApBA,EAAyC,EAAzCA,EAA6C,MAA7CA;AACjCD,mBAAaI,cADoBH;AAEjCI,wBAFiCJ;AAGjCJ;AAHiCI,OAI9Bd,QAJ8Bc,EAAnC;;AAOA,QAAIF,OAAO,CAACC,WAAZ,EAAyB;AACvB,YAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACF;AACF,G;;kBAhBsBG,4B;;;;;;gCAkBfpB,WACLW,QADKX,EAELC,QAFKD,EAGU;AACf;AACA,UAAM,EAAEa,GAAF,KAAUV,MAAMY,8BAAIC,eAAJD,CAAoB,mBAApBA,EAAyC,EAAzCA,EAA6C,MAA7CA;AACpBJ;AADoBI,OAEjBd,QAFiBc,EAAtB;;AAKA,QAAIF,GAAJ,EAAS;AACP,YAAM,IAAII,KAAJ,CAAU,6BAAV,CAAN;AACF;AACF,G;;kBAbsBI,4B;;;;;;;AAxEtB;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;QAWSC,O;QAASC,G","file":"../../credentials/Credentials.js","sourcesContent":["/* @flow */\n\nimport Api from '../Api';\nimport * as Android from './AndroidCredentials';\nimport * as Ios from './IosCredentials';\n\nexport type Credentials = Ios.Credentials | Android.Credentials;\n\nexport type CredentialMetadata = {\n  username: string,\n  experienceName: string,\n  bundleIdentifier?: string,\n  platform: string,\n};\n\nexport { Android, Ios };\n\nexport async function credentialsExistForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  const creds = await fetchCredentials(metadata, false);\n  return !!(creds: any); // !! performed on awaited creds\n}\n\nexport async function getEncryptedCredentialsForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, false);\n}\n\nexport async function getCredentialsForPlatform(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, true);\n}\n\nasync function fetchCredentials(\n  { username, experienceName, bundleIdentifier, platform }: CredentialMetadata,\n  decrypt: boolean\n): Promise<?Credentials> {\n  // this doesn't hit our mac rpc channel, so it needs significantly less debugging\n  const { err, credentials } = await Api.callMethodAsync('getCredentials', [], 'post', {\n    username,\n    experienceName,\n    bundleIdentifier,\n    platform,\n    decrypt,\n  });\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(\n  platform: string,\n  newCredentials: Credentials,\n  userCredentialsIds: Array<number>,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { err, credentials } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n    credentials: newCredentials,\n    userCredentialsIds,\n    platform,\n    ...metadata,\n  });\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n}\n\nexport async function removeCredentialsForPlatform(\n  platform: string,\n  metadata: CredentialMetadata\n): Promise<void> {\n  // doesn't go through mac rpc, no request id needed\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n}\n"],"sourceRoot":"/xdl@53.1.4/src"}