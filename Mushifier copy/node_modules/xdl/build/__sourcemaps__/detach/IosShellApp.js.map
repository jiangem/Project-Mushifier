{"version":3,"sources":["detach/IosShellApp.js"],"names":["async","projectName","workspacePath","configuration","type","relativeBuildDestination","verbose","buildDest","let","buildCmd","pathToArtifact","path","join","Error","logger","info","await","spawnAsyncThrowError","stdio","cwd","shell","resolve","_buildAsync","isRepoUpdateEnabled","pathsToClean","forEach","fs","existsSync","rimraf","sync","cocoapodsArgs","push","_podInstallAsync","args","expoSourcePath","workspaceSourcePath","privateConfigFile","privateConfigData","privateConfig","privateConfigContents","readFile","JSON","parse","manifest","withFields","buildPhase","stringify","url","sdkVersion","releaseChannel","getManifestAsync","Accept","buildFlags","StandaloneBuildFlags","createIos","appleTeamId","buildType","context","StandaloneContext","createServiceContext","archivePath","testEnvironment","shellAppSdkVersion","_createStandaloneContextAsync","_validateCLIArgs","output","IosNSBundle","configureAsync","archiveName","config","slug","replace","appReleasePath","data","spawnAsync","EXPOKIT_APP","stdoutOnly","pipeToLogger","loggerFields","workspaceName","EXPONENT_APP","configureAndCopyArchiveAsync","skipRepoUpdate","build","ios","_","IosWorkspace","createDetachedAsync","_createTurtleWorkspaceAsync","createTurtleWorkspaceAsync","reuseWorkspace","getPaths","relative","artifactDestPath","buildAndCopyArtifactAsync","action"],"mappings":"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","file":"../../detach/IosShellApp.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport rimraf from 'rimraf';\n\nimport { getManifestAsync, spawnAsync, spawnAsyncThrowError } from './ExponentTools';\nimport * as IosNSBundle from './IosNSBundle';\nimport * as IosWorkspace from './IosWorkspace';\nimport StandaloneBuildFlags from './StandaloneBuildFlags';\nimport StandaloneContext from './StandaloneContext';\nimport logger from './Logger';\n\nexport const EXPOKIT_APP = 'ExpoKitApp';\nexport const EXPONENT_APP = 'Exponent';\n\nfunction _validateCLIArgs(args) {\n  args.type = args.type || 'archive';\n  args.configuration = args.configuration || 'Release';\n  args.verbose = args.verbose || false;\n  args.testEnvironment = args.testEnvironment || 'none';\n\n  switch (args.type) {\n    case 'simulator': {\n      if (args.configuration !== 'Debug' && args.configuration !== 'Release') {\n        throw new Error(`Unsupported build configuration ${args.configuration}`);\n      }\n      break;\n    }\n    case 'archive': {\n      if (args.configuration !== 'Release') {\n        throw new Error('Release is the only supported configuration when archiving');\n      }\n      break;\n    }\n    case 'client':\n      break;\n    default: {\n      throw new Error(`Unsupported build type ${args.type}`);\n    }\n  }\n\n  switch (args.action) {\n    case 'configure': {\n      if (args.type === 'client') {\n        break;\n      }\n\n      if (!args.url) {\n        throw new Error('Must run with `--url MANIFEST_URL`');\n      }\n      if (!args.sdkVersion) {\n        throw new Error('Must run with `--sdkVersion SDK_VERSION`');\n      }\n      if (!args.archivePath) {\n        throw new Error(\n          'Need to provide --archivePath <path to existing archive for configuration>'\n        );\n      }\n      if (\n        args.testEnvironment !== 'local' &&\n        args.testEnvironment !== 'ci' &&\n        args.testEnvironment !== 'none'\n      ) {\n        throw new Error(`Unsupported test environment ${args.testEnvironment}`);\n      }\n      break;\n    }\n    case 'build': {\n      break;\n    }\n    case 'create-workspace': {\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build action ${args.action}`);\n    }\n  }\n\n  return args;\n}\n\n/**\n *  Build the iOS workspace at the given path.\n *  @return the path to the resulting build artifact\n */\nasync function _buildAsync(\n  projectName,\n  workspacePath,\n  configuration,\n  type,\n  relativeBuildDestination,\n  verbose\n) {\n  const buildDest = `${relativeBuildDestination}-${type}`;\n  let buildCmd = `set -o pipefail && xcodebuild -workspace ${projectName}.xcworkspace -scheme ${projectName} -configuration ${configuration} -derivedDataPath ${buildDest} -UseModernBuildSystem=NO`,\n    pathToArtifact;\n  if (type === 'simulator') {\n    buildCmd += ` -sdk iphonesimulator CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO ARCHS=\"i386 x86_64\" ONLY_ACTIVE_ARCH=NO | xcpretty`;\n    pathToArtifact = path.join(\n      buildDest,\n      'Build',\n      'Products',\n      `${configuration}-iphonesimulator`,\n      `${projectName}.app`\n    );\n  } else if (type === 'archive') {\n    buildCmd += ` -sdk iphoneos -destination generic/platform=iOS archive -archivePath ${buildDest}/${projectName}.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty`;\n    pathToArtifact = path.join(buildDest, `${projectName}.xcarchive`);\n  } else {\n    throw new Error(`Unsupported build type: ${type}`);\n  }\n\n  logger.info(`Building iOS workspace at ${workspacePath} to ${buildDest}:\\n`);\n  logger.info(buildCmd);\n  if (!verbose) {\n    logger.info(\n      '\\nxcodebuild is running. Logging errors only. To see full output, use --verbose 1...'\n    );\n  }\n  await spawnAsyncThrowError(buildCmd, null, {\n    // only stderr\n    stdio: verbose ? 'inherit' : ['ignore', 'ignore', 'inherit'],\n    cwd: workspacePath,\n    shell: true,\n  });\n  return path.resolve(workspacePath, pathToArtifact);\n}\n\nasync function _podInstallAsync(workspacePath, isRepoUpdateEnabled) {\n  // ensure pods are clean\n  const pathsToClean = [path.join(workspacePath, 'Pods'), path.join(workspacePath, 'Podfile.lock')];\n  pathsToClean.forEach(path => {\n    if (fs.existsSync(path)) {\n      rimraf.sync(path);\n    }\n  });\n\n  // install\n  let cocoapodsArgs = ['install'];\n  if (isRepoUpdateEnabled) {\n    cocoapodsArgs.push('--repo-update');\n  }\n  logger.info('Installing iOS workspace dependencies...');\n  logger.info(`pod ${cocoapodsArgs.join(' ')}`);\n  await spawnAsyncThrowError('pod', cocoapodsArgs, {\n    stdio: 'inherit',\n    cwd: workspacePath,\n  });\n}\n\n/**\n * @param workspacePath optionally provide a path for the unbuilt xcode workspace to create/use.\n * @param expoSourcePath path to expo client app sourcecode (/ios dir from expo/expo repo)\n * @param shellAppSdkVersion sdk version for shell app\n */\nasync function _createStandaloneContextAsync(args) {\n  // right now we only ever build a single detached workspace for service contexts.\n  // TODO: support multiple different pod configurations, assemble a cache of those builds.\n  const expoSourcePath = args.expoSourcePath || '../ios';\n  let workspaceSourcePath;\n  if (args.workspacePath) {\n    workspaceSourcePath = args.workspacePath;\n  } else {\n    workspaceSourcePath = path.join(expoSourcePath, '..', 'shellAppWorkspaces', 'ios', 'default');\n  }\n  let { privateConfigFile, privateConfigData } = args;\n\n  let privateConfig;\n  if (privateConfigData) {\n    privateConfig = privateConfigData;\n  } else if (privateConfigFile) {\n    let privateConfigContents = await fs.readFile(privateConfigFile, 'utf8');\n    privateConfig = JSON.parse(privateConfigContents);\n  }\n\n  let manifest;\n  if (args.manifest) {\n    manifest = args.manifest;\n    logger\n      .withFields({ buildPhase: 'reading manifest' })\n      .info('Using manifest:', JSON.stringify(manifest));\n  } else if (args.url && args.sdkVersion) {\n    const { url, sdkVersion, releaseChannel } = args;\n    manifest = await getManifestAsync(url, {\n      'Exponent-SDK-Version': sdkVersion,\n      'Exponent-Platform': 'ios',\n      'Expo-Release-Channel': releaseChannel ? releaseChannel : 'default',\n      Accept: 'application/expo+json,application/json',\n    });\n  }\n\n  const buildFlags = StandaloneBuildFlags.createIos(args.configuration, {\n    workspaceSourcePath,\n    appleTeamId: args.appleTeamId,\n    buildType: args.type,\n  });\n  const context = StandaloneContext.createServiceContext(\n    expoSourcePath,\n    args.archivePath,\n    manifest,\n    privateConfig,\n    args.testEnvironment,\n    buildFlags,\n    args.url,\n    args.releaseChannel,\n    args.shellAppSdkVersion\n  );\n  return context;\n}\n\n/**\n * possible args:\n *  @param url manifest url for shell experience\n *  @param sdkVersion sdk to use when requesting the manifest\n *  @param releaseChannel channel to pull manifests from, default is 'default'\n *  @param archivePath path to existing NSBundle to configure\n *  @param privateConfigFile path to a private config file containing, e.g., private api keys\n *  @param appleTeamId Apple Developer's account Team ID\n *  @param output specify the output path of the configured archive (ie) /tmp/my-app-archive-build.xcarchive or /tmp/my-app-ios-build.tar.gz\n *  @param type type of artifact to configure (simulator or archive)\n *  @param expoSourcePath path to expo client app sourcecode (/ios dir from expo/expo repo)\n */\nasync function configureAndCopyArchiveAsync(args) {\n  args = _validateCLIArgs(args);\n  const { output, type } = args;\n  const context = await _createStandaloneContextAsync(args);\n  await IosNSBundle.configureAsync(context);\n  if (output) {\n    if (type === 'simulator') {\n      const archiveName = context.config.slug.replace(/[^0-9a-z_\\-]/gi, '_');\n      const appReleasePath = path.resolve(context.data.archivePath, '..');\n      await spawnAsync(\n        `mv ${EXPOKIT_APP}.app ${archiveName}.app && tar -czvf ${output} ${archiveName}.app`,\n        null,\n        {\n          stdoutOnly: true,\n          pipeToLogger: true,\n          loggerFields: { buildPhase: 'creating an archive for simulator' },\n          cwd: appReleasePath,\n          shell: true,\n        }\n      );\n    } else if (type === 'archive' || type === 'client') {\n      const workspaceName = type === 'archive' ? EXPOKIT_APP : EXPONENT_APP;\n      await spawnAsync('/bin/mv', [`${workspaceName}.xcarchive`, output], {\n        pipeToLogger: true,\n        cwd: `${context.data.archivePath}/../../../..`,\n        loggerFields: { buildPhase: 'renaming archive' },\n      });\n    }\n  }\n  return context.data.manifest;\n}\n\n/**\n * possible args:\n *  @param skipRepoUpdate if true, omit `--repo-update` cocoapods flag.\n */\nasync function _createTurtleWorkspaceAsync(context, args) {\n  const { skipRepoUpdate } = args;\n  if (fs.existsSync(context.build.ios.workspaceSourcePath)) {\n    logger.info(`Removing existing workspace at ${context.build.ios.workspaceSourcePath}...`);\n    try {\n      rimraf.sync(context.build.ios.workspaceSourcePath);\n    } catch (_) {}\n  }\n  await IosWorkspace.createDetachedAsync(context);\n  await _podInstallAsync(context.build.ios.workspaceSourcePath, !skipRepoUpdate);\n}\n\n/**\n * External-facing version can be used to create a turtle workspace without building it.\n * Probably only useful for local testing.\n *\n * @param workspacePath (optional) provide some other path to create the workspace besides the default\n * @param url (optional, with sdkVersion) url to an expo manifest, if you want the workspace to be configured automatically\n * @param sdkVersion (optional, with url) sdkVersion to an expo manifest, if you want the workspace to be configured automatically\n */\nasync function createTurtleWorkspaceAsync(args) {\n  args = _validateCLIArgs(args);\n  if (!args.workspacePath) {\n    logger.info(\n      'No workspace path was provided with --workspacePath, so the default will be used.'\n    );\n  }\n  const context = await _createStandaloneContextAsync(args);\n  await _createTurtleWorkspaceAsync(context, args);\n  logger.info(\n    `Created turtle workspace at ${\n      context.build.ios.workspaceSourcePath\n    }. You can open and run this in Xcode.`\n  );\n  if (context.config) {\n    await IosNSBundle.configureAsync(context);\n    logger.info(\n      `The turtle workspace was configured for the url ${\n        args.url\n      }. To run this app with a Debug scheme, make sure to add a development url to 'EXBuildConstants.plist'.`\n    );\n  } else {\n    logger.info(\n      `You can specify --url <manifestUrl> --sdkVersion <version> to configure this workspace as a particular Expo app.\\n\\nBecause those arguments were omitted, the workspace has not been configured. It will compile but not run. The minimum configuration to get something running is to specify a manifest url in 'EXShell.plist' (for Release builds) or 'EXBuildConstants.plist' (for Debug builds).`\n    );\n  }\n}\n\n/**\n * possible args:\n *  @param configuration StandaloneBuildConfiguration (Debug or Release)\n *  @param verbose show all xcodebuild output (default false)\n *  @param reuseWorkspace if true, when building, assume a detached workspace already exists rather than creating a new one.\n *  @param type type of artifact to build (simulator or archive)\n *  @param shellAppSdkVersion sdk version for shell app\n */\nasync function buildAndCopyArtifactAsync(args) {\n  args = _validateCLIArgs(args);\n  const context = await _createStandaloneContextAsync(args);\n  const { verbose, type, reuseWorkspace } = args;\n  const { projectName } = IosWorkspace.getPaths(context);\n\n  if (!reuseWorkspace) {\n    await _createTurtleWorkspaceAsync(context, args);\n  }\n  const pathToArtifact = await _buildAsync(\n    projectName,\n    context.build.ios.workspaceSourcePath,\n    context.build.configuration,\n    type,\n    path.relative(context.build.ios.workspaceSourcePath, '../shellAppBase'),\n    verbose\n  );\n  const artifactDestPath = path.join('../shellAppBase-builds', type, context.build.configuration);\n  logger.info(`\\nFinished building, copying artifact to ${path.resolve(artifactDestPath)}...`);\n  if (fs.existsSync(artifactDestPath)) {\n    await spawnAsyncThrowError('/bin/rm', ['-rf', artifactDestPath]);\n  }\n  logger.info(`mkdir -p ${artifactDestPath}`);\n  await spawnAsyncThrowError('/bin/mkdir', ['-p', artifactDestPath]);\n  logger.info(`cp -R ${pathToArtifact} ${artifactDestPath}`);\n  await spawnAsyncThrowError('/bin/cp', ['-R', pathToArtifact, artifactDestPath]);\n}\n\nexport { buildAndCopyArtifactAsync, configureAndCopyArchiveAsync, createTurtleWorkspaceAsync };\n"],"sourceRoot":"/xdl@53.1.4/src"}