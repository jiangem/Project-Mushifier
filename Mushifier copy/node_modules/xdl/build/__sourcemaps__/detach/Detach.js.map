{"version":3,"sources":["detach/Detach.js"],"names":["async","message","ok","await","inquirer","prompt","type","name","yesnoAsync","projectRoot","options","let","originalLogger","logger","loggerObj","configure","trace","verbose","console","bind","debug","info","warn","error","fatal","_detachAsync","detachAsync","user","UserManager","ensureLoggedInAsync","Error","username","configName","configPath","configNamespace","ProjectUtils","findConfigFileAsync","exp","pkg","readConfigJsonAsync","experienceName","slug","experienceUrl","hasIosDirectory","isDirectory","path","join","hasAndroidDirectory","ErrorCode","DIRECTORY_ALREADY_EXISTS","process","platform","response","sdkVersion","Versions","gteSdkVersion","versions","versionsAsync","sdkVersionConfig","sdkVersions","androidExpoViewUrl","iosExpoViewUrl","env","EXPO_VIEW_DIR","isDetached","detach","detachedUUID","uuid","v4","replace","generatedScheme","scheme","expoDirectory","fs","mkdirpSync","context","StandaloneContext","createUserContext","isIosSupported","force","ios","bundleIdentifier","iosBundleIdentifier","validate","value","test","detachIOSAsync","IosWorkspace","addDetachedConfigToExp","android","package","androidPackage","androidDirectory","rimraf","sync","detachAndroidAsync","AndroidShellApp","config","writeFile","JSON","stringify","packagesToInstall","nodeModulesPath","resolve","reactNativeVersion","expoReactNativeTag","push","spawnAsync","cwd","expokitNpmPackage","length","installPackagesAsync","packageManager","createDetachedAsync","IosNSBundle","configureAsync","expoViewUrl","androidProjectDirectory","data","projectPath","tmpExpoDirectory","copyInitialShellAppFilesAsync","Api","downloadAsync","extract","runShellAppModificationsAsync","rimrafDontThrow","configFilePath","doesBuildConstantsExist","existsSync","IosPlist","createBlankAsync","ensureBuildConstantsExistsIOSAsync","iosProjectDirectory","expoKitVersion","podfileLockPath","podfileLock","readFile","expoKitVersionRegex","match","exec","e","_getIosExpoKitVersionThrowErrorAsync","projectDir","args","prepareDetachedUserContextIosAsync","prepareDetachedServiceContextIosAsync","prepareDetachedBuildIosAsync","expoRootDir","workspaceSourcePath","buildFlags","StandaloneBuildFlags","createIos","createServiceContext","supportingDirectory","getPaths","prodApiKeys","_readDefaultApiKeysAsync","expoSourcePath","modifyAsync","constantsConfig","contextType","STANDALONE_CONTEXT_TYPE","EXPO_RUNTIME_VERSION","API_SERVER_ENDPOINT","ENVIRONMENT","DEFAULT_API_KEYS","TEMPORARY_SDK_VERSION","jsonFilePath","keys","allKeys","readAsync","validKeys","key","hasOwnProperty","includes","podsDirectory","rnPodDirectory","rnFilesToDelete","glob","i","unlink","skipXcodeConfig","devUrl","UrlUtils","constructManifestUrlAsync","defaultApiKeys","developmentUrl","expoBuildConstantsMatches","expoBuildConstants","regexFileAsync","prepareDetachedBuildAsync","publishManifestPath","bundledManifestPath","manifest","parse","ex","AssetBundle","bundleAsync","bundledAssets","dest","bundleAssetsAsync"],"mappings":"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","file":"../../detach/Detach.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n/**\n * @flow\n */\n\n'use strict';\n\n// Set EXPO_VIEW_DIR to universe/exponent to test locally\n\nimport fs from 'fs-extra';\nimport JsonFile from '@expo/json-file';\nimport path from 'path';\nimport process from 'process';\nimport rimraf from 'rimraf';\nimport glob from 'glob-promise';\nimport uuid from 'uuid';\nimport inquirer from 'inquirer';\nimport spawnAsync from '@expo/spawn-async';\n\nimport { isDirectory, regexFileAsync, rimrafDontThrow } from './ExponentTools';\n\nimport * as AssetBundle from './AssetBundle';\nimport * as IosPlist from './IosPlist';\nimport * as IosNSBundle from './IosNSBundle';\nimport * as IosWorkspace from './IosWorkspace';\nimport * as AndroidShellApp from './AndroidShellApp';\n\nimport Api from '../Api';\nimport ErrorCode from '../ErrorCode';\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport UserManager from '../User';\nimport XDLError from '../XDLError';\nimport StandaloneBuildFlags from './StandaloneBuildFlags';\nimport StandaloneContext from './StandaloneContext';\nimport * as UrlUtils from '../UrlUtils';\nimport * as Versions from '../Versions';\nimport installPackagesAsync from './installPackagesAsync';\nimport logger from './Logger';\n\nasync function yesnoAsync(message) {\n  const { ok } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'ok',\n      message,\n    },\n  ]);\n  return ok;\n}\n\nexport async function detachAsync(projectRoot: string, options: any = {}) {\n  let originalLogger = logger.loggerObj;\n  logger.configure({\n    trace: options.verbose ? console.trace.bind(console) : () => {},\n    debug: options.verbose ? console.debug.bind(console) : () => {},\n    info: options.verbose ? console.info.bind(console) : () => {},\n    warn: console.warn.bind(console),\n    error: console.error.bind(console),\n    fatal: console.error.bind(console),\n  });\n  try {\n    return await _detachAsync(projectRoot, options);\n  } finally {\n    logger.configure(originalLogger);\n  }\n}\n\nasync function _detachAsync(projectRoot, options) {\n  let user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Internal error -- somehow detach is being run in offline mode.');\n  }\n\n  let username = user.username;\n  const { configName, configPath, configNamespace } = await ProjectUtils.findConfigFileAsync(\n    projectRoot\n  );\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp) throw new Error(`Couldn't read ${configName}`);\n  if (!pkg) throw new Error(`Couldn't read package.json`);\n  let experienceName = `@${username}/${exp.slug}`;\n  let experienceUrl = `exp://exp.host/${experienceName}`;\n\n  // Check to make sure project isn't fully detached already\n  let hasIosDirectory = isDirectory(path.join(projectRoot, 'ios'));\n  let hasAndroidDirectory = isDirectory(path.join(projectRoot, 'android'));\n\n  if (hasIosDirectory && hasAndroidDirectory) {\n    throw new XDLError(\n      ErrorCode.DIRECTORY_ALREADY_EXISTS,\n      'Error detaching. `ios` and `android` directories already exist.'\n    );\n  }\n\n  // Project was already detached on Windows or Linux\n  if (!hasIosDirectory && hasAndroidDirectory && process.platform === 'darwin') {\n    let response = await yesnoAsync(\n      `This will add an Xcode project and leave your existing Android project alone. Enter 'yes' to continue:`\n    );\n    if (!response) {\n      logger.info('Exiting...');\n      return false;\n    }\n  }\n\n  if (hasIosDirectory && !hasAndroidDirectory) {\n    throw new Error('`ios` directory already exists. Please remove it and try again.');\n  }\n\n  logger.info('Validating project manifest...');\n  if (!exp.name) {\n    throw new Error(`${configName} is missing \\`name\\``);\n  }\n\n  if (!exp.sdkVersion) {\n    throw new Error(`${configName} is missing \\`sdkVersion\\``);\n  }\n\n  if (!Versions.gteSdkVersion(exp, '24.0.0')) {\n    throw new Error(\n      `The app must be updated to SDK 24.0.0 or newer to be compatible with this tool.`\n    );\n  }\n\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[exp.sdkVersion];\n  if (\n    !sdkVersionConfig ||\n    !sdkVersionConfig.androidExpoViewUrl ||\n    !sdkVersionConfig.iosExpoViewUrl\n  ) {\n    if (process.env.EXPO_VIEW_DIR) {\n      logger.warn(\n        `Detaching is not supported for SDK ${\n          exp.sdkVersion\n        }; ignoring this because you provided EXPO_VIEW_DIR`\n      );\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Detaching is not supported for SDK version ${exp.sdkVersion}`);\n    }\n  }\n\n  // Modify exp.json\n  exp.isDetached = true;\n\n  if (!exp.detach) {\n    exp.detach = {};\n  }\n\n  let detachedUUID = uuid.v4().replace(/-/g, '');\n  let generatedScheme = `exp${detachedUUID}`;\n\n  if (!exp.detach.scheme && !Versions.gteSdkVersion(exp, '27.0.0')) {\n    // set this for legacy purposes\n    exp.detach.scheme = generatedScheme;\n  }\n\n  if (!exp.scheme) {\n    logger.info(\n      `You have not specified a custom scheme for deep linking. A default value of ${generatedScheme} will be used. You can change this later by following the instructions in this guide: https://docs.expo.io/versions/latest/workflow/linking/`\n    );\n    exp.scheme = generatedScheme;\n  }\n\n  let expoDirectory = path.join(projectRoot, '.expo-source');\n  fs.mkdirpSync(expoDirectory);\n  const context = StandaloneContext.createUserContext(projectRoot, exp, experienceUrl);\n\n  // iOS\n  let isIosSupported = true;\n  if (process.platform !== 'darwin') {\n    if (options && options.force) {\n      logger.warn(\n        `You are not running macOS, but have provided the --force option, so we will attempt to generate an iOS project anyway. This might fail.`\n      );\n    } else {\n      logger.warn(`Skipping iOS because you are not running macOS.`);\n      isIosSupported = false;\n    }\n  }\n\n  if (!hasIosDirectory && isIosSupported) {\n    if (!exp.ios) {\n      exp.ios = {};\n    }\n    if (!exp.ios.bundleIdentifier) {\n      logger.info(\n        `You'll need to specify an iOS bundle identifier. See: https://docs.expo.io/versions/latest/workflow/configuration/#ios`\n      );\n      const { iosBundleIdentifier } = await inquirer.prompt([\n        {\n          name: 'iosBundleIdentifier',\n          message: 'What would you like your iOS bundle identifier to be?',\n          validate: value => /^[a-zA-Z][a-zA-Z0-9\\-\\.]+$/.test(value),\n        },\n      ]);\n      exp.ios.bundleIdentifier = iosBundleIdentifier;\n    }\n\n    await detachIOSAsync(context);\n    exp = IosWorkspace.addDetachedConfigToExp(exp, context);\n    exp.detach.iosExpoViewUrl = sdkVersionConfig.iosExpoViewUrl;\n  }\n\n  // Android\n  if (!hasAndroidDirectory) {\n    if (!exp.android) {\n      exp.android = {};\n    }\n    if (!exp.android.package) {\n      logger.info(\n        `You'll need to specify an Android package name. See: https://docs.expo.io/versions/latest/workflow/configuration/#android`\n      );\n      const { androidPackage } = await inquirer.prompt([\n        {\n          name: 'androidPackage',\n          message: 'What would you like your Android package name to be?',\n          validate: value =>\n            /^[a-zA-Z][a-zA-Z0-9\\_]*(\\.[a-zA-Z][a-zA-Z0-9\\_]*)+$/.test(value)\n              ? true\n              : \"Invalid format of Android package name (only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter)\",\n        },\n      ]);\n      exp.android.package = androidPackage;\n    }\n\n    let androidDirectory = path.join(expoDirectory, 'android');\n    rimraf.sync(androidDirectory);\n    fs.mkdirpSync(androidDirectory);\n    await detachAndroidAsync(context, sdkVersionConfig.androidExpoViewUrl);\n    exp = AndroidShellApp.addDetachedConfigToExp(exp, context);\n    exp.detach.androidExpoViewUrl = sdkVersionConfig.androidExpoViewUrl;\n  }\n\n  logger.info('Writing ExpoKit configuration...');\n  // Update exp.json/app.json\n  // if we're writing to app.json, we need to place the configuration under the expo key\n  const config = configNamespace ? { [configNamespace]: exp } : exp;\n  await fs.writeFile(configPath, JSON.stringify(config, null, 2));\n\n  const packagesToInstall = [];\n  const nodeModulesPath = exp.nodeModulesPath\n    ? path.resolve(projectRoot, exp.nodeModulesPath)\n    : projectRoot;\n\n  let reactNativeVersion;\n  if (sdkVersionConfig && sdkVersionConfig.expoReactNativeTag) {\n    packagesToInstall.push(\n      `react-native@https://github.com/expo/react-native/archive/${\n        sdkVersionConfig.expoReactNativeTag\n      }.tar.gz`\n    );\n  } else if (process.env.EXPO_VIEW_DIR) {\n    // ignore, using test directory\n  } else {\n    throw new Error(`Expo's React Native fork does not support this SDK version.`);\n  }\n\n  // Add expokitNpmPackage if it is supported. Was added before SDK 29.\n  if (process.env.EXPO_VIEW_DIR) {\n    logger.info(`Linking 'expokit' package...`);\n    await spawnAsync('yarn', ['link'], {\n      cwd: path.join(process.env.EXPO_VIEW_DIR, 'expokit-npm-package'),\n    });\n    await spawnAsync('yarn', ['link', 'expokit'], {\n      cwd: nodeModulesPath,\n    });\n  } else if (sdkVersionConfig.expokitNpmPackage) {\n    packagesToInstall.push(sdkVersionConfig.expokitNpmPackage);\n  }\n\n  if (packagesToInstall.length) {\n    await installPackagesAsync(projectRoot, packagesToInstall, {\n      packageManager: options.packageManager,\n    });\n  }\n  return true;\n}\n\n/**\n *  Create a detached Expo iOS app pointing at the given project.\n */\nasync function detachIOSAsync(context: StandaloneContext) {\n  await IosWorkspace.createDetachedAsync(context);\n\n  logger.info('Configuring iOS project...');\n  await IosNSBundle.configureAsync(context);\n\n  logger.info(`iOS detach is complete!`);\n}\n\nasync function detachAndroidAsync(context: StandaloneContext, expoViewUrl: string) {\n  if (context.type !== 'user') {\n    throw new Error(`detachAndroidAsync only supports user standalone contexts`);\n  }\n\n  logger.info('Moving Android project files...');\n  let androidProjectDirectory = path.join(context.data.projectPath, 'android');\n  let tmpExpoDirectory;\n  if (process.env.EXPO_VIEW_DIR) {\n    // Only for testing\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      path.join(process.env.EXPO_VIEW_DIR, 'android'),\n      androidProjectDirectory,\n      true,\n      context.data.exp.sdkVersion\n    );\n  } else {\n    tmpExpoDirectory = path.join(context.data.projectPath, 'temp-android-directory');\n    fs.mkdirpSync(tmpExpoDirectory);\n    logger.info('Downloading Android code...');\n    await Api.downloadAsync(expoViewUrl, tmpExpoDirectory, { extract: true });\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      tmpExpoDirectory,\n      androidProjectDirectory,\n      true,\n      context.data.exp.sdkVersion\n    );\n  }\n\n  logger.info('Updating Android app...');\n  await AndroidShellApp.runShellAppModificationsAsync(context, context.data.exp.sdkVersion);\n\n  // Clean up\n  logger.info('Cleaning up Android...');\n  if (!process.env.EXPO_VIEW_DIR) {\n    rimrafDontThrow(tmpExpoDirectory);\n  }\n  logger.info('Android detach is complete!\\n');\n}\n\nasync function ensureBuildConstantsExistsIOSAsync(configFilePath: string) {\n  // EXBuildConstants is included in newer ExpoKit projects.\n  // create it if it doesn't exist.\n  const doesBuildConstantsExist = fs.existsSync(\n    path.join(configFilePath, 'EXBuildConstants.plist')\n  );\n  if (!doesBuildConstantsExist) {\n    await IosPlist.createBlankAsync(configFilePath, 'EXBuildConstants');\n    logger.info('Created `EXBuildConstants.plist` because it did not exist yet');\n  }\n}\n\nasync function _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory: string) {\n  let expoKitVersion = '';\n  const podfileLockPath = path.join(iosProjectDirectory, 'Podfile.lock');\n  try {\n    const podfileLock = await fs.readFile(podfileLockPath, 'utf8');\n    const expoKitVersionRegex = /ExpoKit\\/Core\\W?\\(([0-9\\.]+)\\)/gi;\n    let match = expoKitVersionRegex.exec(podfileLock);\n    expoKitVersion = match[1];\n  } catch (e) {\n    throw new Error(\n      `Unable to read ExpoKit version from Podfile.lock. Make sure your project depends on ExpoKit. (${e})`\n    );\n  }\n  return expoKitVersion;\n}\n\nasync function prepareDetachedBuildIosAsync(projectDir: string, args: any) {\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n  if (exp) {\n    return prepareDetachedUserContextIosAsync(projectDir, exp, args);\n  } else {\n    return prepareDetachedServiceContextIosAsync(projectDir, args);\n  }\n}\n\nasync function prepareDetachedServiceContextIosAsync(projectDir: string, args: any) {\n  // service context\n  // TODO: very brittle hack: the paths here are hard coded to match the single workspace\n  // path generated inside IosShellApp. When we support more than one path, this needs to\n  // be smarter.\n  const expoRootDir = path.join(projectDir, '..', '..');\n  const workspaceSourcePath = path.join(projectDir, 'default');\n  const buildFlags = StandaloneBuildFlags.createIos('Release', { workspaceSourcePath });\n  const context = StandaloneContext.createServiceContext(\n    expoRootDir,\n    null,\n    null,\n    null,\n    /* testEnvironment */ 'none',\n    buildFlags,\n    null,\n    null\n  );\n  const { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n  const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n  // use prod api keys if available\n  const prodApiKeys = await _readDefaultApiKeysAsync(\n    path.join(context.data.expoSourcePath, '__internal__', 'keys.json')\n  );\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(expoRootDir);\n\n  await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n    // verify that we are actually in a service context and not a misconfigured project\n    const contextType = constantsConfig.STANDALONE_CONTEXT_TYPE;\n    if (contextType !== 'service') {\n      throw new Error(\n        'Unable to configure a project which has no app.json and also no STANDALONE_CONTEXT_TYPE.'\n      );\n    }\n    constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n    constantsConfig.API_SERVER_ENDPOINT =\n      process.env.ENVIRONMENT === 'staging'\n        ? 'https://staging.exp.host/--/api/v2/'\n        : 'https://exp.host/--/api/v2/';\n    if (prodApiKeys) {\n      constantsConfig.DEFAULT_API_KEYS = prodApiKeys;\n    }\n    if (exp && exp.sdkVersion) {\n      constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n    }\n    return constantsConfig;\n  });\n}\n\nasync function _readDefaultApiKeysAsync(jsonFilePath: string) {\n  if (fs.existsSync(jsonFilePath)) {\n    let keys = {};\n    const allKeys = await new JsonFile(jsonFilePath).readAsync();\n    const validKeys = ['AMPLITUDE_KEY', 'GOOGLE_MAPS_IOS_API_KEY'];\n    for (const key in allKeys) {\n      if (allKeys.hasOwnProperty(key) && validKeys.includes(key)) {\n        keys[key] = allKeys[key];\n      }\n    }\n    return keys;\n  }\n  return null;\n}\n\nasync function prepareDetachedUserContextIosAsync(projectDir: string, exp: any, args: any) {\n  const context = StandaloneContext.createUserContext(projectDir, exp);\n  let { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n\n  logger.info(`Preparing iOS build at ${iosProjectDirectory}...`);\n  // These files cause @providesModule naming collisions\n  // but are not available until after `pod install` has run.\n  let podsDirectory = path.join(iosProjectDirectory, 'Pods');\n  if (!isDirectory(podsDirectory)) {\n    throw new Error(`Can't find directory ${podsDirectory}, make sure you've run pod install.`);\n  }\n  let rnPodDirectory = path.join(podsDirectory, 'React');\n  if (isDirectory(rnPodDirectory)) {\n    let rnFilesToDelete = await glob(rnPodDirectory + '/**/*.@(js|json)');\n    if (rnFilesToDelete) {\n      for (let i = 0; i < rnFilesToDelete.length; i++) {\n        await fs.unlink(rnFilesToDelete[i]);\n      }\n    }\n  }\n\n  // insert expo development url into iOS config\n  if (!args.skipXcodeConfig) {\n    // populate EXPO_RUNTIME_VERSION from ExpoKit pod version\n    const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n    // populate development url\n    let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n    // populate default api keys\n    const defaultApiKeys = await _readDefaultApiKeysAsync(\n      path.join(podsDirectory, 'ExpoKit', 'template-files', 'keys.json')\n    );\n\n    await ensureBuildConstantsExistsIOSAsync(supportingDirectory);\n    await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n      constantsConfig.developmentUrl = devUrl;\n      constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n      if (defaultApiKeys) {\n        constantsConfig.DEFAULT_API_KEYS = defaultApiKeys;\n      }\n      if (exp.sdkVersion) {\n        constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n      }\n      return constantsConfig;\n    });\n  }\n}\n\nexport async function prepareDetachedBuildAsync(projectDir: string, args: any) {\n  if (args.platform === 'ios') {\n    await prepareDetachedBuildIosAsync(projectDir, args);\n  } else {\n    let androidProjectDirectory = path.join(projectDir, 'android');\n    let expoBuildConstantsMatches = await glob(\n      androidProjectDirectory + '/**/DetachBuildConstants.java'\n    );\n    if (expoBuildConstantsMatches && expoBuildConstantsMatches.length) {\n      let expoBuildConstants = expoBuildConstantsMatches[0];\n      let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n      await regexFileAsync(\n        /DEVELOPMENT_URL \\= \\\"[^\\\"]*\\\"\\;/,\n        `DEVELOPMENT_URL = \"${devUrl}\";`,\n        expoBuildConstants\n      );\n    }\n  }\n}\n\ntype BundleAssetsArgs = {\n  platform: 'ios' | 'android',\n  // This is the path where assets will be copied to. It should be\n  // `$CONFIGURATION_BUILD_DIR/$UNLOCALIZED_RESOURCES_FOLDER_PATH` on iOS\n  // (see `exponent-view-template.xcodeproj/project.pbxproj` for an example)\n  // and `$buildDir/intermediates/assets/$targetPath` on Android (see\n  // `android/app/expo.gradle` for an example).\n  dest: string,\n};\n\nexport async function bundleAssetsAsync(projectDir: string, args: BundleAssetsArgs) {\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n  if (!exp) {\n    // Don't run assets bundling for the service context.\n    return;\n  }\n  let publishManifestPath =\n    args.platform === 'ios' ? exp.ios.publishManifestPath : exp.android.publishManifestPath;\n  if (!publishManifestPath) {\n    logger.warn(\n      `Skipped assets bundling because the '${\n        args.platform\n      }.publishManifestPath' key is not specified in the app manifest.`\n    );\n    return;\n  }\n  let bundledManifestPath = path.join(projectDir, publishManifestPath);\n  let manifest;\n  try {\n    manifest = JSON.parse(await fs.readFile(bundledManifestPath, 'utf8'));\n  } catch (ex) {\n    throw new Error(\n      `Error reading the manifest file. Make sure the path '${bundledManifestPath}' is correct.\\n\\nError: ${\n        ex.message\n      }`\n    );\n  }\n  await AssetBundle.bundleAsync(null, manifest.bundledAssets, args.dest);\n}\n"],"sourceRoot":"/xdl@53.1.4/src"}