{"version":3,"sources":["UrlUtils.js"],"names":["async","projectRoot","opts","requestHostname","constructUrlAsync","constructBundleUrlAsync","constructManifestUrlAsync","let","urlString","await","urlObj","url","parse","protocol","slashes","format","constructHostUriAsync","baseUrl","urlType","constructLogUrlAsync","entryPoint","ext","defaultOpts","dev","minify","bundleUrl","hostType","mainModulePath","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","constructUrlWithExtensionAsync","constructPublishUrlAsync","constructSourceMapUrlAsync","constructAssetsUrlAsync","constructDebuggerHostAsync","encodeURIComponent","hasOwnProperty","strict","exp","pkg","ProjectUtils","readConfigJsonAsync","pluginModule","resolveModule","supportsAssetPlugins","Versions","gteSdkVersion","packagerInfo","ProjectSettings","readPackagerInfoAsync","webpackServerPort","constructWebAppUrlAsync","isPackager","schema","joi","object","keys","any","valid","lanType","boolean","urlRandomness","string","optional","allow","error","validate","ErrorCode","INVALID_OPTIONS","toString","getPackagerOptsAsync","Object","assign","detach","scheme","hostname","port","proxyURL","process","env","EXPO_PACKAGER_PROXY_URL","EXPO_MANIFEST_PROXY_URL","parsedProxyURL","packagerPort","expoServerPort","Config","offline","EXPO_PACKAGER_HOSTNAME","trim","REACT_NATIVE_PACKAGER_HOSTNAME","ip","address","os","ngrokUrl","packagerNgrokUrl","expoServerNgrokUrl","logWarning","clearNotification","pnu","url_","Error","validator","isURL","protocols","isHttps","randomIdentifier","sevenDigitIdentifier","randomIdentifierForUser","someRandomness","domainify","getPlatformSpecificBundleUrl","replace","length","alphabet","result","i","j","Math","floor","random","c","substr","username","join","s","toLowerCase","platform","includes","Exp","ENTRY_POINT_PLATFORM_TEMPLATE_STRING"],"mappings":"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","file":"../UrlUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport joi from 'joi';\nimport os from 'os';\nimport path from 'path';\nimport url from 'url';\nimport validator from 'validator';\n\nimport ip from './ip';\nimport Config from './Config';\nimport ErrorCode from './ErrorCode';\nimport * as Exp from './Exp';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\n\nexport async function constructBundleUrlAsync(\n  projectRoot: string,\n  opts: any,\n  requestHostname?: string\n) {\n  return constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructManifestUrlAsync(\n  projectRoot: string,\n  opts: any,\n  requestHostname?: string\n) {\n  return constructUrlAsync(projectRoot, opts, false, requestHostname);\n}\n\n// gets the base manifest URL and removes the scheme\nexport async function constructHostUriAsync(projectRoot: string, requestHostname?: string) {\n  let urlString = await constructUrlAsync(projectRoot, null, false, requestHostname);\n  // we need to use node's legacy urlObject api since the newer one doesn't like empty protocols\n  let urlObj = url.parse(urlString);\n  urlObj.protocol = '';\n  urlObj.slashes = false;\n  return url.format(urlObj);\n}\n\nexport async function constructLogUrlAsync(projectRoot: string, requestHostname?: string) {\n  let baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  return `${baseUrl}/logs`;\n}\n\nexport async function constructUrlWithExtensionAsync(\n  projectRoot: string,\n  entryPoint: string,\n  ext: string,\n  requestHostname?: string,\n  opts?: Object\n) {\n  const defaultOpts = {\n    dev: false,\n    minify: true,\n  };\n  opts = opts || defaultOpts;\n  let bundleUrl = await constructBundleUrlAsync(\n    projectRoot,\n    {\n      hostType: 'localhost',\n      urlType: 'http',\n    },\n    requestHostname\n  );\n\n  let mainModulePath = guessMainModulePath(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  let queryParams = await constructBundleQueryParamsAsync(projectRoot, opts, requestHostname);\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string,\n  opts?: Object\n) {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'bundle',\n    requestHostname,\n    opts\n  );\n}\n\nexport async function constructSourceMapUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'map', requestHostname);\n}\n\nexport async function constructAssetsUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets', requestHostname);\n}\n\nexport async function constructDebuggerHostAsync(projectRoot: string, requestHostname?: string) {\n  return constructUrlAsync(\n    projectRoot,\n    {\n      urlType: 'no-protocol',\n    },\n    true,\n    requestHostname\n  );\n}\n\nexport async function constructBundleQueryParamsAsync(projectRoot: string, opts: any) {\n  let queryParams = `dev=${encodeURIComponent(!!opts.dev)}`;\n\n  if (opts.hasOwnProperty('strict')) {\n    queryParams += `&strict=${encodeURIComponent(!!opts.strict)}`;\n  }\n\n  if (opts.hasOwnProperty('minify')) {\n    queryParams += `&minify=${encodeURIComponent(!!opts.minify)}`;\n  }\n\n  queryParams += '&hot=false';\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  // Use an absolute path here so that we can not worry about symlinks/relative requires\n  let pluginModule = ProjectUtils.resolveModule('expo/tools/hashAssetFiles', projectRoot, exp);\n  queryParams += `&assetPlugin=${encodeURIComponent(pluginModule)}`;\n\n  // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n  // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n  let supportsAssetPlugins = Versions.gteSdkVersion(exp, '11.0.0');\n  if (!supportsAssetPlugins) {\n    queryParams += '&includeAssetFileHashes=true';\n  }\n\n  return queryParams;\n}\n\nexport async function constructWebAppUrlAsync(projectRoot) {\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.webpackServerPort) {\n    return null;\n  }\n  return `http://localhost:${packagerInfo.webpackServerPort}`;\n}\n\nexport async function constructUrlAsync(\n  projectRoot: string,\n  opts: any,\n  isPackager: boolean,\n  requestHostname?: string\n) {\n  if (opts) {\n    let schema = joi.object().keys({\n      urlType: joi.any().valid('exp', 'http', 'redirect', 'no-protocol'),\n      lanType: joi.any().valid('ip', 'hostname'),\n      hostType: joi.any().valid('localhost', 'lan', 'tunnel'),\n      dev: joi.boolean(),\n      strict: joi.boolean(),\n      minify: joi.boolean(),\n      urlRandomness: joi\n        .string()\n        .optional()\n        .allow(null),\n    });\n\n    const { error } = joi.validate(opts, schema);\n    if (error) {\n      throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n    }\n  }\n\n  let defaultOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!opts) {\n    opts = defaultOpts;\n  } else {\n    opts = Object.assign({}, defaultOpts, opts);\n  }\n\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol;\n  if (opts.urlType === 'http') {\n    protocol = 'http';\n  } else if (opts.urlType === 'no-protocol') {\n    protocol = null;\n  } else {\n    protocol = 'exp';\n\n    let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    if (exp.detach) {\n      if (exp.scheme && Versions.gteSdkVersion(exp, '27.0.0')) {\n        protocol = exp.scheme;\n      } else if (exp.detach.scheme) {\n        // must keep this fallback in place for older projects\n        // and those detached with an older version of xdl\n        protocol = exp.detach.scheme;\n      }\n    }\n  }\n\n  let hostname;\n  let port;\n\n  const proxyURL = isPackager\n    ? process.env.EXPO_PACKAGER_PROXY_URL\n    : process.env.EXPO_MANIFEST_PROXY_URL;\n  if (proxyURL) {\n    const parsedProxyURL = url.parse(proxyURL);\n    hostname = parsedProxyURL.hostname;\n    port = parsedProxyURL.port;\n    if (parsedProxyURL.protocol === 'https:') {\n      if (protocol === 'http') {\n        protocol = 'https';\n      }\n      if (!port) {\n        port = '443';\n      }\n    }\n  } else if (opts.hostType === 'localhost' || requestHostname === 'localhost') {\n    hostname = '127.0.0.1';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || Config.offline) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME.trim();\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    let ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        'Tunnel URL not found, falled back to LAN URL.',\n        'tunnel-url-not-found'\n      );\n      return constructUrlAsync(\n        projectRoot,\n        { ...opts, hostType: 'lan' },\n        isPackager,\n        requestHostname\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'tunnel-url-not-found');\n      let pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  let url_ = '';\n  if (protocol) {\n    url_ += `${protocol}://`;\n  }\n\n  if (!hostname) {\n    throw new Error('Hostname cannot be inferred.');\n  }\n\n  url_ += hostname;\n\n  if (port) {\n    url_ += `:${port}`;\n  } else {\n    // Android HMR breaks without this :|\n    url_ += ':80';\n  }\n\n  if (opts.urlType === 'redirect') {\n    return `https://exp.host/--/to-exp/${encodeURIComponent(url_)}`;\n  }\n\n  return url_;\n}\n\nexport function guessMainModulePath(entryPoint: string) {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function randomIdentifier(length: number = 6) {\n  let alphabet = '23456789qwertyuipasdfghjkzxcvbnm';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    let j = Math.floor(Math.random() * alphabet.length);\n    let c = alphabet.substr(j, 1);\n    result += c;\n  }\n  return result;\n}\n\nexport function sevenDigitIdentifier() {\n  return `${randomIdentifier(3)}-${randomIdentifier(4)}`;\n}\n\nexport function randomIdentifierForUser(username: string) {\n  return `${username}-${randomIdentifier(3)}-${randomIdentifier(2)}`;\n}\n\nexport function someRandomness() {\n  return [randomIdentifier(2), randomIdentifier(3)].join('-');\n}\n\nexport function domainify(s: string) {\n  return s\n    .toLowerCase()\n    .replace(/[^a-z0-9-]/g, '-')\n    .replace(/^-+/, '')\n    .replace(/-+$/, '');\n}\n\nexport function getPlatformSpecificBundleUrl(url: string, platform: string) {\n  if (url.includes(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING)) {\n    return url.replace(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING, platform);\n  } else {\n    return url;\n  }\n}\n\nexport async function isHttps(url) {\n  return validator.isURL(url, { protocols: ['https'] });\n}\n"],"sourceRoot":"/xdl@53.1.4/src"}