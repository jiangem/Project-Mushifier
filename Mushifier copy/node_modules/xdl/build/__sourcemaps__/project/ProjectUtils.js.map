{"version":3,"sources":["project/ProjectUtils.js"],"names":["async","file","await","fs","stat","isFile","e","fileExistsAsync","projectRoot","appJson","path","join","expJson","_findConfigPathAsync","let","configPath","customConfigPaths","configName","basename","configNamespace","hasWarnedAboutExpJson","logWarning","findConfigFileAsync","configFilenameAsync","expRcPath","existsSync","JsonFile","readAsync","json5","logError","toString","readExpRcAsync","setCustomConfigPath","exp","pkg","rootConfig","code","isJsonFileError","message","packageJsonPath","nodeModulesPath","resolve","name","slug","toLowerCase","version","platforms","readConfigJsonAsync","options","config","Error","writeAsync","writeConfigJsonAsync","logWithLevel","logDebug","logInfo","clearNotification","attachLoggerStream","resolveModule","MAX_MESSAGE_LENGTH","_projectRootToLogger","_getLogger","logger","Logger","child","type","project","level","object","msg","id","issueId","debug","info","warn","error","tag","truncatedMessage","length","substring","Analytics","logEvent","issueCleared","stream","addStream","request","fromDir","resolveFrom"],"mappings":"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","file":"../../project/ProjectUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport JsonFile from '@expo/json-file';\nimport resolveFrom from 'resolve-from';\nimport slug from 'slugify';\n\nimport * as Analytics from '../Analytics';\nimport Config from '../Config';\nimport Logger from '../Logger';\nimport * as state from '../state';\n\nimport * as Sentry from '../Sentry';\n\nconst MAX_MESSAGE_LENGTH = 200;\nlet _projectRootToLogger = {};\n\nfunction _getLogger(projectRoot: string) {\n  let logger = _projectRootToLogger[projectRoot];\n  if (!logger) {\n    logger = Logger.child({\n      type: 'project',\n      project: path.resolve(projectRoot),\n    });\n    _projectRootToLogger[projectRoot] = logger;\n  }\n\n  return logger;\n}\n\nexport function logWithLevel(\n  projectRoot: string,\n  level: string,\n  object: any,\n  msg: string,\n  id: ?string\n) {\n  if (id) {\n    object.issueId = id;\n  }\n\n  let logger = _getLogger(projectRoot);\n  switch (level) {\n    case 'debug':\n      logger.debug(object, msg);\n      break;\n    case 'info':\n      logger.info(object, msg);\n      break;\n    case 'warn':\n      logger.warn(object, msg);\n      break;\n    case 'error':\n      logger.error(object, msg);\n      break;\n    default:\n      logger.debug(object, msg);\n      break;\n  }\n}\n\nexport function logDebug(projectRoot: string, tag: string, message: string, id: ?string) {\n  _getLogger(projectRoot).debug({ tag }, message.toString());\n}\n\nexport function logInfo(projectRoot: string, tag: string, message: string, id: ?string) {\n  const object = { tag };\n  if (id) {\n    object.issueId = id;\n  }\n  _getLogger(projectRoot).info(object, message.toString());\n}\n\nexport function logError(projectRoot: string, tag: string, message: string, id: ?string) {\n  const object = { tag };\n  if (id) {\n    object.issueId = id;\n  }\n  _getLogger(projectRoot).error(object, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n\n  // temporarily remove sentry until we can trim events\n  // send error to Sentry\n  // Sentry.logError(message.toString(), {\n  //   tags: { tag },\n  // });\n}\n\nexport function logWarning(projectRoot: string, tag: string, message: string, id: ?string) {\n  const object = { tag };\n  if (id) {\n    object.issueId = id;\n  }\n  _getLogger(projectRoot).warn(object, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n  Analytics.logEvent('Project Warning', {\n    projectRoot,\n    tag,\n    message: truncatedMessage,\n  });\n}\n\nexport function clearNotification(projectRoot: string, id: string) {\n  _getLogger(projectRoot).info(\n    {\n      tag: 'expo',\n      issueCleared: true,\n      issueId: id,\n    },\n    `No issue with ${id}`\n  );\n}\n\nexport function attachLoggerStream(projectRoot: string, stream: any) {\n  _getLogger(projectRoot).addStream(stream);\n}\n\nexport async function fileExistsAsync(file: string): Promise<boolean> {\n  try {\n    return (await fs.stat(file)).isFile();\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function resolveModule(request, projectRoot, exp) {\n  const fromDir = exp.nodeModulesPath ? exp.nodeModulesPath : projectRoot;\n  return resolveFrom(fromDir, request);\n}\n\nasync function _findConfigPathAsync(projectRoot) {\n  const appJson = path.join(projectRoot, 'app.json');\n  const expJson = path.join(projectRoot, 'exp.json');\n  if (await fileExistsAsync(appJson)) {\n    return appJson;\n  } else if (await fileExistsAsync(expJson)) {\n    return expJson;\n  } else {\n    return appJson;\n  }\n}\n\nlet hasWarnedAboutExpJson = false;\n\nexport async function findConfigFileAsync(\n  projectRoot: string\n): Promise<{ configPath: string, configName: string, configNamespace: ?string }> {\n  let configPath;\n  if (customConfigPaths[projectRoot]) {\n    configPath = customConfigPaths[projectRoot];\n  } else {\n    configPath = await _findConfigPathAsync(projectRoot);\n  }\n  const configName = path.basename(configPath);\n  const configNamespace = configName !== 'exp.json' ? 'expo' : null;\n\n  if (configName === 'exp.json' && !hasWarnedAboutExpJson) {\n    hasWarnedAboutExpJson = true;\n    logWarning(\n      projectRoot,\n      'expo',\n      `Warning: configuration using exp.json is deprecated.\nPlease move your configuration from exp.json to app.json.\nExample app.json:\n{\n  \"expo\": {\n    (JSON contents from exp.json)\n  }\n}`\n    );\n  }\n\n  return { configPath, configName, configNamespace };\n}\n\nexport async function configFilenameAsync(projectRoot: string): Promise<string> {\n  return (await findConfigFileAsync(projectRoot)).configName;\n}\n\nexport async function readExpRcAsync(projectRoot: string): Promise<any> {\n  const expRcPath = path.join(projectRoot, '.exprc');\n\n  if (!fs.existsSync(expRcPath)) {\n    return {};\n  }\n\n  try {\n    return await JsonFile.readAsync(expRcPath, { json5: true });\n  } catch (e) {\n    logError(projectRoot, 'expo', `Error parsing JSON file: ${e.toString()}`);\n    return {};\n  }\n}\n\nlet customConfigPaths = {};\n\nexport async function setCustomConfigPath(projectRoot: string, configPath: string) {\n  customConfigPaths[projectRoot] = configPath;\n}\n\nexport async function readConfigJsonAsync(\n  projectRoot: string\n): Promise<{ exp?: Object, pkg?: Object, rootConfig?: Object }> {\n  let exp;\n  let pkg;\n  let rootConfig;\n\n  const { configPath, configName, configNamespace } = await findConfigFileAsync(projectRoot);\n\n  try {\n    exp = await JsonFile.readAsync(configPath, { json5: true });\n\n    if (configNamespace) {\n      // if we're not using exp.json, then we've stashed everything under an expo key\n      rootConfig = exp;\n      exp = exp[configNamespace];\n    }\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      // config missing. might be in package.json\n    } else if (e.isJsonFileError) {\n      logError(projectRoot, 'expo', e.message);\n      return { exp: null, pkg: null };\n    }\n  }\n\n  try {\n    const packageJsonPath =\n      exp && exp.nodeModulesPath\n        ? path.join(path.resolve(projectRoot, exp.nodeModulesPath), 'package.json')\n        : path.join(projectRoot, 'package.json');\n    pkg = await JsonFile.readAsync(packageJsonPath);\n  } catch (e) {\n    if (e.isJsonFileError) {\n      logError(projectRoot, 'expo', e.message);\n      return { exp: null, pkg: null };\n    }\n\n    // pkg missing\n  }\n\n  // Easiest bail-out: package.json is missing\n  if (!pkg) {\n    logError(projectRoot, 'expo', `Error: Can't find package.json`);\n    return { exp: null, pkg: null };\n  }\n\n  // Grab our exp config from package.json (legacy) or exp.json\n  if (!exp && pkg.exp) {\n    exp = pkg.exp;\n    logError(projectRoot, 'expo', `Error: Move your \"exp\" config from package.json to app.json.`);\n  } else if (!exp && !pkg.exp) {\n    logError(projectRoot, 'expo', `Error: Missing ${configName}. See https://docs.expo.io/`);\n    return { exp: null, pkg: null };\n  }\n\n  // fill any required fields we might care about\n\n  // TODO(adam) decide if there are other fields we want to provide defaults for\n\n  if (exp && !exp.name) {\n    exp.name = pkg.name;\n  }\n\n  if (exp && !exp.slug) {\n    exp.slug = slug(exp.name.toLowerCase());\n  }\n\n  if (exp && !exp.version) {\n    exp.version = pkg.version;\n  }\n\n  if (exp && !exp.platforms) {\n    exp.platforms = ['android', 'ios'];\n  }\n\n  if (exp.nodeModulesPath) {\n    exp.nodeModulesPath = path.resolve(projectRoot, exp.nodeModulesPath);\n  }\n\n  return { exp, pkg, rootConfig };\n}\n\nexport async function writeConfigJsonAsync(\n  projectRoot: string,\n  options: Object\n): Promise<{ exp: ?Object, pkg: ?Object, rootConfig: ?Object }> {\n  const { configName, configPath, configNamespace } = await findConfigFileAsync(projectRoot);\n  let { exp, pkg, rootConfig } = await readConfigJsonAsync(projectRoot);\n  let config = rootConfig || {};\n\n  if (!exp) {\n    throw new Error(`Couldn't read ${configName}`);\n  }\n  if (!pkg) {\n    throw new Error(`Couldn't read package.json`);\n  }\n\n  exp = {\n    ...exp,\n    ...options,\n  };\n\n  if (configNamespace) {\n    config[configNamespace] = exp;\n  } else {\n    config = exp;\n  }\n\n  await JsonFile.writeAsync(configPath, config, { json5: false });\n\n  return {\n    exp,\n    pkg,\n    rootConfig,\n  };\n}\n"],"sourceRoot":"/xdl@53.1.4/src"}