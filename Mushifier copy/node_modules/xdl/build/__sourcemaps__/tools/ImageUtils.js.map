{"version":3,"sources":["tools/ImageUtils.js"],"names":["async","projectDirname","basename","await","_getImageDimensionsAsync","_","getImageDimensionsAsync","imagePath","path","resolve","readStream","fs","createReadStream","width","height","probeImageSize","destroy","_getImageDimensionsWithImageProbeAsync","iconSizePx","iconFilename","destinationIconPath","process","platform","_resizeImageAsync","_resizeImageWithSipsAsync","_hasWarned","logger","warn","resizeImageAsync","spawnAsyncThrowError","stdio","cwd","let","setResizeImageFunction","fn","setGetImageDimensionsFunction"],"mappings":";;;;;;;AAWA;;;;;;+BAKAA,WACEC,cADFD,EAEEE,QAFFF,EAG+C;AAC7C,QAAI;AACF,aAAOG,MAAMC,yBAAyBH,cAAzBG,EAAyCF,QAAzCE,CAAb;AACF,KAFA,CAEE,OAAOC,CAAP,EAAU,CAAC;AACb,WAAO,IAAP;AACF,G;;kBAReC,uB;;;;;;gCAUfN,WACEC,cADFD,EAEEE,QAFFF,EAG8C;AAC5C,UAAMO,YAAYC,cAAKC,OAALD,CAAaP,cAAbO,EAA6BN,QAA7BM,CAAlB;AACA,UAAME,aAAaC,YAAGC,gBAAHD,CAAoBJ,SAApBI,CAAnB;AACA,UAAM,EAAEE,KAAF,EAASC,MAAT,KAAoBX,MAAMY,yDAAeL,UAAfK,CAAhC;AACAL,eAAWM,OAAXN;AACA,WAAO,EAAEG,KAAF,EAASC,MAAT,EAAP;AACF,G;;kBATeG,sC;;;;;;gCAYfjB,WACEkB,UADFlB,EAEEmB,YAFFnB,EAGEoB,mBAHFpB,EAIE;AACA,QACEqB,QAAQC,QAARD,KAAqB,QAArBA,IACAE,sBAAsBC,yBADtBH,IAEA,CAACI,UAHH,EAIE;AACAC,0CAAOC,IAAPD,CAAY,qDAAZA;AACAD,mBAAa,IAAbA;AACF;AACA,WAAOF,kBAAkBL,UAAlBK,EAA8BJ,YAA9BI,EAA4CH,mBAA5CG,CAAP;AACF,G;;kBAdeK,gB;;;;;;gCAgBf5B,WACEkB,UADFlB,EAEEmB,YAFFnB,EAGEoB,mBAHFpB,EAIE;AACA,WAAO6B,oEAAqB,MAArBA,EAA6B,CAAC,IAAD,EAAOX,UAAP,EAAmBC,YAAnB,CAA7BU,EAA+D;AACpEC,aAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAD6D,EAC9B;AACtCC,WAAKX;AAF+D,KAA/DS,CAAP;AAIF,G;;kBATeL,yB;;;;;AAWf;;;;;AA7DA;AAAA;AAAA;;AACA;;AACA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;AA4BAQ,IAAIP,aAAa,KAAjBO;AA6BAA,IAAIT,oBAAoBC,yBAAxBQ;AACAA,IAAI5B,2BAA2Ba,sCAA/Be;;AAEA;AACA;AACA,SAASC,sBAAT,CACEC,EADF,EAEE;AACAX,sBAAoBW,EAApBX;AACF;;AAEA;AACA;AACA,SAASY,6BAAT,CACED,EADF,EAEE;AACA9B,6BAA2B8B,EAA3B9B;AACF;;QAGEwB,gB,GAAAA,gB;QACAK,sB,GAAAA,sB;QACAE,6B,GAAAA,6B;QACA7B,uB,GAAAA,uB","file":"../../tools/ImageUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport probeImageSize from 'probe-image-size';\nimport path from 'path';\nimport fs from 'fs';\n\nimport { spawnAsyncThrowError } from '../detach/ExponentTools';\nimport logger from '../detach/Logger';\n\n/**\n * @param {string} projectDirname\n * @param {string} basename\n * @returns {} { width: number, height: number } image dimensions or null\n */\nasync function getImageDimensionsAsync(\n  projectDirname: string,\n  basename: string\n): Promise<?{ width: number, height: number }> {\n  try {\n    return await _getImageDimensionsAsync(projectDirname, basename);\n  } catch (_) {}\n  return null;\n}\n\nasync function _getImageDimensionsWithImageProbeAsync(\n  projectDirname: string,\n  basename: string\n): Promise<{ width: number, height: number }> {\n  const imagePath = path.resolve(projectDirname, basename);\n  const readStream = fs.createReadStream(imagePath);\n  const { width, height } = await probeImageSize(readStream);\n  readStream.destroy();\n  return { width, height };\n}\n\nlet _hasWarned = false;\nasync function resizeImageAsync(\n  iconSizePx: number,\n  iconFilename: string,\n  destinationIconPath: string\n) {\n  if (\n    process.platform !== 'darwin' &&\n    _resizeImageAsync === _resizeImageWithSipsAsync &&\n    !_hasWarned\n  ) {\n    logger.warn('`sips` utility may or may not work outside of macOS');\n    _hasWarned = true;\n  }\n  return _resizeImageAsync(iconSizePx, iconFilename, destinationIconPath);\n}\n\nasync function _resizeImageWithSipsAsync(\n  iconSizePx: number,\n  iconFilename: string,\n  destinationIconPath: string\n) {\n  return spawnAsyncThrowError('sips', ['-Z', iconSizePx, iconFilename], {\n    stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n    cwd: destinationIconPath,\n  });\n}\n\n// Allow us to swap out the default implementations of image functions\nlet _resizeImageAsync = _resizeImageWithSipsAsync;\nlet _getImageDimensionsAsync = _getImageDimensionsWithImageProbeAsync;\n\n// Allow users to provide an alternate implementation for our image resize function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setResizeImageFunction(\n  fn: (iconSizePx: number, iconFilename: string, destinationIconPath: string) => Promise<any>\n) {\n  _resizeImageAsync = fn;\n}\n\n// Allow users to provide an alternate implementation for our image dimensions function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setGetImageDimensionsFunction(\n  fn: (dirname: string, filename: string) => Promise<?{ width: number, height: number }>\n) {\n  _getImageDimensionsAsync = fn;\n}\n\nexport {\n  resizeImageAsync,\n  setResizeImageFunction,\n  setGetImageDimensionsFunction,\n  getImageDimensionsAsync,\n};\n"],"sourceRoot":"/xdl@53.1.4/src"}